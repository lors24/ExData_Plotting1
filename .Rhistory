@
\documentclass{article}
\begin{document}
\SweaveOpts{concordance=TRUE}
\documentclass{article}
\begin{document}
\SweaveOpts{concordance=TRUE}
<<echo=false>>=
data(PlantGrowth)
summary(PlantGrowth)
@
hola
\end{document}
Sweave(Bayesiana.Rnw)
Sweave("Bayesiana.Rnw")
<<>>=
\usepackage[spanish,mexico]{babel}
\usepackage[left=3cm,right=3cm,top=2.5cm,bottom=2.5cm]{geometry}
\begin{document}
read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),widths=3)
read.fwf(url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),widths=3)
GET(url)
library(httr)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "
GET(url)
a<-GET(url)
d2 <- read.table("getdata_wksst8110.for", header = FALSE, stringsAsFactors = FALSE, skip = 3, nrows=1)
d2 <- read.table(url, header = FALSE, stringsAsFactors = FALSE, skip = 3, nrows=1)
d2 <- read.table(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), header = FALSE, stringsAsFactors = FALSE, skip = 3, nrows=1)
L2 <- t(d2)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
library(httr)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
library(xlsx)
library(XML)
library(data.table)
library(DBI)
library(XML)
library(httr)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "
a<-GET(url)
a
names(a)
read.fwf(url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),widths=3)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
d2 <- read.table(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), header = FALSE, stringsAsFactors = FALSE, skip = 3, nrows=1)
read.fwf(url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),widths=3)
x <- read.fwf(
file=url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
head(x)
sum(x$V4)
fileUrl<-"http://biostat.jhsph.edu/~jleek/contact.html"
html3=GET(fileUrl)
html3
n.rows(html3)
nrows(html3)
?nrows
?nrow
nrow(html3)
content2=content(html2,as="text")
fileUrl<-"http://biostat.jhsph.edu/~jleek/contact.html"
html2=GET(fileUrl)
content2=content(html2,as="text")
parseHtml=htmlParse(content2,asText=T)
parseHtml
nrow(parseHtml)
html<-htmlTreeParse(fileUrl,useInternalNodes=T)
html
nrow(html)
head(x)
content2
nchar(content2)
content2=content(html2,as="text")
fileUrl<-"http://biostat.jhsph.edu/~jleek/contact.html"
html2=GET(fileUrl)
content2=content(html2,as="text")
nchar(content2)
content2
content2[1:10]
content2[1:10]
content2[1]
nchar(content2[10])
nchar(content2[20])
nchar(content2[30])
fileUrl<-"http://biostat.jhsph.edu/~jleek/contact.html"
doc<-htmlTreeParse(fileUrl,useInternal=T)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
xmlSApply(rootNode,xmlValue)
aux<-xmlSApply(rootNode,xmlValue)
lenght(aux)
length(aux)
nchar(aux)
rootNode<-xmlRoot(doc)
rootNode
rootNode[1]
nchar(rootNode[10])
xmlSApply(rootNode,xmlValue)
pu<-"<ul class="sidemenu">"
pu<-"ul class="sidemenu""
pu<-"ul class="sidemenu"
pu<-"ul class="sidemenu"""
pu<-"ul class="sidemenu""
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con,warn=FALSE)
close(con)
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
str(apply)
x<-matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
apply(x,1,quantile,probs=c(0.25,0.75))
a<-array(rnorm(2*2*10),c(2,2,10))
a
apply(a,c(1,2),mean) #colapasar la tercer dimension
rowMeans(a,dims=2)
str(tapply)
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify=F)
tapply(x,f,range)
str(split)
x
x,f
split(x,f)
lapply(split(x,f),mean)
sapply(split(x,f),mean)
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s,function(x) colmMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=T))
x<-rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2)),drop=T)
str(split(x,list(f1,f2) ,drop=T) #quita los valores vacios
str(split(x,list(f1,f2) ,drop=T)) #quita los valores vacios
str(mapply)
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
noise<-funciton(n,mean,sd){
+rnorm(n,mean,sd)
noise<-funciton(n,mean,sd){
noise<-function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
list(noise(1,1,2),nosie(2,2,2),noise(3,3,2),noise(4,4,2,noise(5,5,2)))
list(noise(1,1,2),noise(2,2,2),noise(3,3,2),noise(4,4,2,noise(5,5,2)))
list(noise(1,1,2),noise(2,2,2),noise(3,3,2),noise(4,4,2),noise(5,5,2)))
list(noise(1,1,2),noise(2,2,2),noise(3,3,2),noise(4,4,2),noise(5,5,2))
log(-1)
printmessage <- function(x){
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(2)
printmessage(1)
printmessage(NA)
printmessage2<-funcion(x){
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2<-function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x<-log(-1)
printmessage2(x)
mean(x)
mean(x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
options(error=recover)
read.csv("nosuchfile")
library(datasets)
data(iris)
head(iris)
str(lapply)
lapply(iris$Sepal.Length[iris$Species="virginica"],mean)
lapply(iris$Sepal.Length[iris$Species=="virginica"],mean)
lapply(iris[iris$Species=="virginica"],mean)
lapply(iris,[iris$Species=="virginica"],mean)
lapply(iris[,iris$Species=="virginica"],mean)
lapply(iris[,iris$Species=="virginica"],mean)
apply(iris[,iris$Species=="virginica"],mean)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length[iris$species=="virginica"])
mean(iris$Sepal.Length[iris$species=="virginica"],na.rm=T)
iris$Sepal.Length
iris$Sepal.Length[iris$species=="virginica"]
names(iris)
mean(iris$Sepal.Length[iris$Species=="virginica"],na.rm=T)
head(iris)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
colMeans(iris)
colMeans(iris[,21:4])
colMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcar$hp,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
x<-tapply(mtcars$hp,mtcars$cyl,mean)
x[3]-x[1]
debug(ls)
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
nn
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(2)
debug(makeVector)
makeVector
makeVector(2)
get(2)
get
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1:10))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-c(1:10)
makeVector(x)
cachemean(x)
a<-makeVector(x)
cachemean(a)
a<-makeVector(x)
a
a$getmean()
debug(cachemean)
cachemean(a)
a$get()
a<-makevector(x)
a<-makeVector(x)
a
a$setmean
a$getmean
a$get
cachemean(a)
a$getmean()
a$get()
a$set(y)
a$set(c(2:5))
a$set
a
a$get
a$set
a$getmean
cachemean(a)
cachemean(a)
1100+qnorm(.95)*1100
qnorm(.95)
1100/9+qnorm(.95)*1100/9
1100+qnorm(.95)*1100/3
1100+qnorm(.95)*sqrt(1100)
getwd()
setwd("/Users/loredp/Documents/Coursera/ExploratoryAnalysis/Project1")
dir()
setwd("/Users/loredp/Documents/Coursera/ExploratoryAnalysis/Project1/ExData_Plotting1")
dir()
#Read libraries
library(lubridate)
data <- read.table("./household_power_consumption.txt",
sep = ";", header = T, na.strings = "?",
colClasses = c("character", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
dir()
data <- read.table("./household_power_consumption.txt",
sep = ";", header = T, na.strings = "?",
colClasses = c("character", "character", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric"))
data$Date <- dmy(data$Date)
data_S <- subset(data, data$Date == dmy("01-02-2007") | data$Date == dmy("02-02-2007"))
par(mar = c(5,5,3,1))
hist(data_S$Global_active_power, col = "red",
xlab = "Global Active Power (kilowatts)",
main = "Global Active Power")
data_S$fec <- strptime(paste(data_S[,1], data_S[,2], sep = ","), "%Y-%m-%d,%H:%M:%S")
par(mar = c(3,5,2,1))
plot(data_S$fec, data_S$Global_active_power, type = "l",
ylab = "Global Active Power (kilowatts)",
xlab = " ")
with(data_S, plot(data_S$fec, data_S$Sub_metering_1, type = "l"))
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
with(data_S, plot(data_S$fec, data_S$Sub_metering_1, type = "l", ylab = "Energy sub metering"))
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", type = "l", col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = 1, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = 2, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = 3, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", pch = 4, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?legend
?pch
legend("topright", col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lwd, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lwd = 3, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
png(filename = "plot3.png")
with(data_S, plot(data_S$fec, data_S$Sub_metering_1, type = "l", ylab = "Energy sub metering"))
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
png(filename = "plot3.png")
with(data_S, plot(data_S$fec, data_S$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering"))
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
names(data)
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power")
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
par(mfrow = c(2,2), mar = c(4,4,2,1), oma= c(0,0,2,0))
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(fec, Global_reactive_power, xlab = "datetime", type = "l")
mtext("Ozone and Weather in NYC", outer = T)
})
png(filename = "plot4.png")
par(mfrow = c(2,2), mar = c(4,4,2,1), oma= c(0,0,2,0))
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(fec, Global_reactive_power, xlab = "datetime", type = "l")
mtext("Ozone and Weather in NYC", outer = T)
})
dev.off()
?label
?legend
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), border = NULL, legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(fec, Global_reactive_power, xlab = "datetime", type = "l")
mtext("Ozone and Weather in NYC", outer = T)
})
png(filename = "plot4.png")
par(mfrow = c(2,2), mar = c(4,4,2,1), oma= c(0,0,2,0))
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), border = NULL, legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(fec, Global_reactive_power, xlab = "datetime", type = "l")
mtext("Ozone and Weather in NYC", outer = T)
})
dev.off()
png(filename = "plot4.png")
par(mfrow = c(2,2), mar = c(4,4,2,1), oma= c(0,0,2,0))
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), bty = "n", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(fec, Global_reactive_power, xlab = "datetime", type = "l")
mtext("Ozone and Weather in NYC", outer = T)
})
dev.off()
png(filename = "plot4.png")
par(mfrow = c(2,2), mar = c(4,4,2,1), oma= c(0,0,2,0))
with(data_S, {
plot(fec, Global_active_power, xlab = "", ylab = "Global Active Power", type = "l")
plot(fec, Voltage, xlab = "datetime", ylab = "Voltage", type = "l")
plot(fec, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
points(data_S$fec, data_S$Sub_metering_2, type = "l", col = "red")
points(data_S$fec, data_S$Sub_metering_3, type = "l", col = "blue")
legend("topright", lwd = 3, col = c("black","red", "blue"), bty = "n", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(fec, Global_reactive_power, xlab = "datetime", type = "l")
})
dev.off()
